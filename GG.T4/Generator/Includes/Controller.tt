
<#+
    // <copyright file="Controller.tt" company="">
    //  Copyright © . All Rights Reserved.
    // </copyright>

    public class Controller : BaseTemplate
    {


        public Controller(T4ModelInfo model):base(model)
        {  
        }
        /// <summary>
        /// 获取 生成的文件名，根据模型名定义
        /// </summary>
        public override string FileName
        {
            get
            { 
                return string.Format("{0}Controller.cs", _model.Name);
            }
        }

        public override string ModuleName
        {
            get
            { 
                return _model.Name;
            }
        }

        public override string SavePath
        {
            get
            { 
                return "\\Controllers";
            }
        }

        public void RenderPropertry(){
            WriteLine(" ");
            foreach(var prop in _model.Properties){
                WriteLine(string.Format("            model.{0}=entity.{0};",prop.Name));
            }
        }



        public override string TransformText()
        {
            base.TransformText();
#>
using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Net;
using System.Net.Http;
using System.Data.Entity;
using System.Web.Http;
using System.Web.Http.Description;
using GG.Data.Service;
using GG.Data.DTO;
using GG.Data.AutoMapper;
using GG.Data.Models;
using AutoMapper.QueryableExtensions;
using System.Threading.Tasks;

namespace GG.Controllers
{
    [RoutePrefix("api/<#= _model.Name #>")]
    public class <#= _model.Name #>Controller : ApiController
    {
        private I<#= _model.Name #>Service <#= _model.Name #>Service;
        public <#= _model.Name #>Controller(
            I<#= _model.Name #>Service _<#= _model.Name #>Service
          )
        {
            this.<#= _model.Name #>Service = _<#= _model.Name #>Service;
        }

        [Route("")]
        public IQueryable<<#= _model.Name #>DTO> Get()
        {
            return <#= _model.Name #>Service.GetAll().Where(x=>!x.Deleted).ProjectTo<<#= _model.Name #>DTO>();
        }

        [Route("{id:int}")]
        [ResponseType(typeof(<#= _model.Name #>DTO))]
        public async Task<IHttpActionResult> GetById(int id)
        {
            <#= _model.Name #>DTO <#= _model.Name #> = await <#= _model.Name #>Service.GetAll().Where(x => x.Id == id&&!x.Deleted).ProjectTo<<#= _model.Name #>DTO>().FirstOrDefaultAsync();
            if (<#= _model.Name #> == null)
            {
                return NotFound();
            }
            return Ok(<#= _model.Name #>);
        }

        [Route("")]
        [HttpPost]
        [ResponseType(typeof(<#= _model.Name #>DTO))]
        public async Task<IHttpActionResult> Create([FromBody]<#= _model.Name #>DTO <#= _model.Name #>Dto)
        {
		    if (!ModelState.IsValid)
            {
                return BadRequest(ModelState);
            }
            var entity = <#= _model.Name #>Dto.ToEntity();
            await <#= _model.Name #>Service.InsertAsync(entity);
            return Ok(entity.ToModel());
        }


        [Route("{id:int}")]
        [HttpPut]
        [ResponseType(typeof(<#= _model.Name #>DTO))]
        public async Task<IHttpActionResult> Update(int id, [FromBody]<#= _model.Name #>DTO <#= _model.Name #>Dto)
        {
			if (!ModelState.IsValid)
            {
                return BadRequest(ModelState);
            }
            var entity = <#= _model.Name #>Dto.ToEntity();
            await <#= _model.Name #>Service.UpdateAsync(entity);
            return Ok(entity.ToModel());
        }

        [Route("{id:int}")]
        [HttpDelete]
        [ResponseType(typeof(<#= _model.Name #>DTO))]
        public async Task<IHttpActionResult> Delete(int id)
        {
            <#= _model.Name #> entity = await <#= _model.Name #>Service.FindOneAsync(id);
            if (entity == null)
            {
                return NotFound();
            }
            await <#= _model.Name #>Service.DeleteAsync(entity);

            return Ok(entity.ToModel());
        }

    }
}

<#+
            return this.GenerationEnvironment.ToString();
        }
    }
#>
