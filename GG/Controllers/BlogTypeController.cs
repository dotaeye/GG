// <autogenerated>
//   This file was generated by T4 code generator Entry.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Net;
using System.Net.Http;
using System.Data.Entity;
using System.Web.Http;
using System.Web.Http.Description;
using GG.Data.Service;
using GG.Data.DTO;
using GG.Data.AutoMapper;
using GG.Data.Models;
using AutoMapper.QueryableExtensions;
using System.Threading.Tasks;

namespace GG.Controllers
{
    [RoutePrefix("api/BlogType")]
    public class BlogTypeController : ApiController
    {
        private IBlogTypeService BlogTypeService;
        public BlogTypeController(
            IBlogTypeService _BlogTypeService
          )
        {
            this.BlogTypeService = _BlogTypeService;
        }

        [Route("")]
        public IQueryable<BlogTypeDTO> Get()
        {
            return BlogTypeService.GetAll().Where(x=>!x.Deleted).ProjectTo<BlogTypeDTO>();
        }

        [Route("{id:int}")]
        [ResponseType(typeof(BlogTypeDTO))]
        public async Task<IHttpActionResult> GetById(int id)
        {
            BlogTypeDTO BlogType = await BlogTypeService.GetAll().Where(x => x.Id == id&&!x.Deleted).ProjectTo<BlogTypeDTO>().FirstOrDefaultAsync();
            if (BlogType == null)
            {
                return NotFound();
            }
            return Ok(BlogType);
        }

        [Route("")]
        [HttpPost]
        [ResponseType(typeof(BlogTypeDTO))]
        public async Task<IHttpActionResult> Create([FromBody]BlogTypeDTO BlogTypeDto)
        {
		    if (!ModelState.IsValid)
            {
                return BadRequest(ModelState);
            }
            var entity = BlogTypeDto.ToEntity();
            await BlogTypeService.InsertAsync(entity);
            return Ok(entity.ToModel());
        }


        [Route("{id:int}")]
        [HttpPut]
        [ResponseType(typeof(BlogTypeDTO))]
        public async Task<IHttpActionResult> Update(int id, [FromBody]BlogTypeDTO BlogTypeDto)
        {
			if (!ModelState.IsValid)
            {
                return BadRequest(ModelState);
            }
            var entity = BlogTypeDto.ToEntity();
            await BlogTypeService.UpdateAsync(entity);
            return Ok(entity.ToModel());
        }

        [Route("{id:int}")]
        [HttpDelete]
        [ResponseType(typeof(BlogTypeDTO))]
        public async Task<IHttpActionResult> Delete(int id)
        {
            BlogType entity = await BlogTypeService.FindOneAsync(id);
            if (entity == null)
            {
                return NotFound();
            }
            await BlogTypeService.DeleteAsync(entity);

            return Ok(entity.ToModel());
        }

    }
}

